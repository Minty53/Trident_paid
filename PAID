if game.PlaceId == 13253735473 then
    local Local_Plr = game:GetService("Players").LocalPlayer
    local Plr_Gui = Local_Plr:FindFirstChild("PlayerGui")
    if Plr_Gui:FindFirstChildOfClass("Actor") then
        Local_Plr:Kick("Failed To Bypass")
    else
        Plr_Gui.ChildAdded:Connect(function(v)
            if v.ClassName == "Actor" then
                if Plr_Gui[v.Name]:FindFirstChild("GameClient") then
                    Plr_Gui[v.Name].GameClient.Parent = Plr_Gui
                    task.wait()
                    v:Destroy()
                    warn("When the Actors Get Bypassedd")
                end
            end
        end)
    end
end

wait(.3)
wait(.3)
wait(.3)

--// Locals
local Camera = game:GetService("Workspace").Camera
local Camera = game:GetService("Workspace").CurrentCamera
local Cam = game:GetService("Workspace").Camera
local CharcaterMiddle = game:GetService("Workspace").Ignore.LocalCharacter.Middle
local Mouse = game.Players.LocalPlayer:GetMouse()
local lighting = game:GetService("Lighting")
local UserInputService = game:GetService("UserInputService")
local SoundService = game:GetService("SoundService")
local Decimals = 2
local Clock = os.clock()

if not LPH_OBFUSCATED then
LPH_JIT = function(...) return ... end
LPH_JIT_MAX = function(...) return ... end
LPH_JIT_ULTRA = function(...) return ... end
LPH_NO_VIRTUALIZE = function(...) return ... end
LPH_NO_UPVALUES = function(f) return(function(...) return f(...) end) end
LPH_ENCSTR = function(...) return ... end
LPH_STRENC = function(...) return ... end
LPH_HOOK_FIX = function(...) return ... end
LPH_CRASH = function() return print(debug.traceback()) end
end

function LPH_JIT_ULTRA(f)
return f
end
function LPH_JIT_MAX(f)
return f
end

local Library = loadstring(game:HttpGet('https://raw.githubusercontent.com/BigHacker123/Library.lua/main/Library.lua'))()
local ThemeManager = loadstring(game:HttpGet('https://raw.githubusercontent.com/BigHacker123/Library.lua/main/Theme.lua'))()
SaveManager = loadstring(game:HttpGet('https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/main/addons/SaveManager.lua'))()
local skybox_assets = loadstring(game:HttpGet("https://raw.githubusercontent.com/BigHacker123/skybox/main/.lua", true))()

local Window = Library:CreateWindow({Title = 'Minty.cc | v2.3 | Build: Custom',Center = true,AutoShow = true,TabPadding = 8,MenuFadeTime = 0.2})
local Tabs = {Combat = Window:AddTab('Combat'),Visual = Window:AddTab('Visual'),Misc = Window:AddTab('Miscellaneous'),Local = Window:AddTab('Local'),World = Window:AddTab('World'),['UI Settings'] = Window:AddTab('Settings'),}

--Tables
local Functions = {}
local Esp = {Settings={
Boxes=false,BoxesOutline=false,BoxesFilled=false,BoxesFilledColor=Color3.fromRGB(255,255,255),BoxesFilledTransparency=0.25,BoxesColor=Color3.fromRGB(255,255,255),OtherBoxesColor=Color3.fromRGB(255,255,255),OtherBoxesColorTeam=Color3.fromRGB(0, 255, 0),BoxesOutlineColor=Color3.fromRGB(0,0,0),CornerEspThickness=1,CornerBoxes=false,
Sleeping=false,SleepingColor=Color3.fromRGB(255,255,255),OtherSleepingColor=Color3.fromRGB(255,255,255),OtherSleepingColorTeam=Color3.fromRGB(0, 255, 0),
Distances=false,DistanceColor=Color3.fromRGB(255,255,255),OtherDistanceColor=Color3.fromRGB(255,255,255),OtherDistanceColorTeam=Color3.fromRGB(0, 255, 0),
Armour=false,ArmourColor=Color3.fromRGB(255,255,255),OtherArmourColor=Color3.fromRGB(255,255,255),OtherArmourColorTeam=Color3.fromRGB(0, 255, 0),
Tool=false,ToolColor=Color3.fromRGB(255,255,255),OtherToolColor=Color3.fromRGB(255,255,255),OtherToolColorTeam=Color3.fromRGB(0, 255, 0),
Tracer=false,TracerColor=Color3.fromRGB(255,255,255),OtherTracerColor=Color3.fromRGB(255,255,255),OtherTracerColorTeam=Color3.fromRGB(0, 255, 0),TracerThickness=1,TracerTransparrency=1,TracerFrom="Bottom",
ViewAngle=false,ViewAngleColor=Color3.fromRGB(255,255,255),OtherViewAngleColor=Color3.fromRGB(255,255,255),OtherViewAngleColorTeam=Color3.fromRGB(0, 255, 0),ViewAngleThickness=1,ViewAngleTransparrency=1,
HeadCircles=false,HeadCirclesColor=Color3.fromRGB(255,255,255),OtherHeadCirclesColor=Color3.fromRGB(255,255,255),OtherHeadCirclesTeam=Color3.fromRGB(0, 255, 0),HeadCirclesThickness=1,HeadCirclesTransparrency=1,HeadCirclesRadius=3,HeadCirclesFilled=false,
HighlightTarget = false,HighlightTargetColor = Color3.fromRGB(255,0,0),
TextFont=2,TextOutline=true,TextSize=12,RenderDistance=1000,TeamCheck=false,TargetSleepers=true,MinTextSize=11
},Drawings={},Connections={},Players={},Ores={},StorageThings={}}local Fonts = {["UI"]=0,["System"]=1,["Plex"]=2,["Monospace"]=3}
local Fonts = {["UI"]=0,["System"]=1,["Plex"]=2,["Monospace"]=3}
local cache = {}

--Locals
local Camera = game:GetService("Workspace").CurrentCamera
local CharcaterMiddle = game:GetService("Workspace").Ignore.LocalCharacter.Middle

--Functions
function Functions:IsSleeping(Model)
if Model and Model:FindFirstChild("AnimationController") and Model.AnimationController:FindFirstChild("Animator") then
    for i,v in pairs(Model.AnimationController.Animator:GetPlayingAnimationTracks()) do
        if v.Animation.AnimationId == "rbxassetid://13280887764" then
            return true
        else
            return false
        end
    end
end
end
function Functions:Draw(Type,Propities)
if not Type and not Propities then return end
local drawing = Drawing.new(Type)
for i,v in pairs(Propities) do
    drawing[i] = v
end
table.insert(Esp.Drawings,drawing)
return drawing
end
function Esp:CreateEsp(PlayerTable)
if not PlayerTable then return end
local drawings = {}
drawings.BoxOutline = Functions:Draw("Square",{Thickness=2,Filled=false,Transparency=1,Color=Esp.Settings.BoxesOutlineColor,Visible=false,ZIndex = -1,Visible=false});
drawings.Box = Functions:Draw("Square",{Thickness=1,Filled=false,Transparency=1,Color=Esp.Settings.BoxesColor,Visible=false,ZIndex = 2,Visible=false});
drawings.Sleeping = Functions:Draw("Text",{Text = "Nil",Font=Esp.Settings.TextFont,Size=Esp.Settings.TextSize,Center=true,Outline=Esp.Settings.TextOutline,Color = Esp.Settings.SleepingColor,ZIndex = 2,Visible=false})
drawings.Distance = Functions:Draw("Text",{Text = "Nil",Font=Esp.Settings.TextFont,Size=Esp.Settings.TextSize,Center=true,Outline=Esp.Settings.TextOutline,Color = Esp.Settings.SleepingColor,ZIndex = 2,Visible=false})
drawings.Armour = Functions:Draw("Text",{Text = "Naked",Font=Esp.Settings.TextFont,Size=Esp.Settings.TextSize,Center=false,Outline=Esp.Settings.TextOutline,Color = Esp.Settings.ArmourColor,ZIndex = 2,Visible=false})
drawings.ViewAngle = Functions:Draw("Line",{Thickness=Esp.Settings.ViewAngleThickness,Transparency=Esp.Settings.ViewAngleTransparrency,Color=Esp.Settings.ViewAngleColor,ZIndex=2,Visible=false})
drawings.PlayerTable = PlayerTable
Esp.Players[PlayerTable.model] = drawings
end
function Esp:RemoveEsp(PlayerTable)
if not PlayerTable and PlayerTable.model ~= nil then return end
esp = Esp.Players[PlayerTable.model];
if not esp then return end
for i, v in pairs(esp) do
    if not type(v) == "table" then
        v:Remove();
    end
end
Esp.Players[PlayerTable.model] = nil;
end

function Esp:UpdateEsp()
for i,v in pairs(Esp.Players) do
    local Character = i
    local Position,OnScreen = Camera:WorldToViewportPoint(Character:GetPivot().Position);
    local scale = 1 / (Position.Z * math.tan(math.rad(Camera.FieldOfView * 0.5)) * 2) * 100;
    local w,h = math.floor(40 * scale), math.floor(55 * scale);
    local x,y = math.floor(Position.X), math.floor(Position.Y);
    local Distance = (CharcaterMiddle:GetPivot().Position-Character:GetPivot().Position).Magnitude
    local BoxPosX,BoxPosY = math.floor(x - w * 0.5),math.floor(y - h * 0.5)
    local offsetCFrame = CFrame.new(0, 0, -4)
    local sleeping = Functions:IsSleeping(Character)
    if Character and Character:FindFirstChild("HumanoidRootPart") and Character:FindFirstChild("Head") then
        local TeamTag = Character.Head.Teamtag.Enabled
        if OnScreen == true and Esp.Settings.Boxes == true and Distance <= Esp.Settings.RenderDistance then
            if Esp.Settings.TeamCheck == true and TeamTag == false then 
                v.BoxOutline.Visible = Esp.Settings.BoxesOutline;v.Box.Visible = true
            elseif Esp.Settings.TeamCheck == true and TeamTag == true then
                v.BoxOutline.Visible = false;v.Box.Visible = false
            else
                v.BoxOutline.Visible = Esp.Settings.BoxesOutline;v.Box.Visible = true
            end
            if Esp.Settings.TargetSleepers == true and sleeping == true then
                v.BoxOutline.Visible = false;v.Box.Visible = false
            end
            v.BoxOutline.Position = Vector2.new(BoxPosX,BoxPosY);v.BoxOutline.Size = Vector2.new(w,h)
            v.Box.Position = Vector2.new(BoxPosX,BoxPosY);v.Box.Size = Vector2.new(w,h)
            v.Box.Color = Esp.Settings.BoxesColor;v.BoxOutline.Color = Esp.Settings.BoxesOutlineColor
        else
            v.BoxOutline.Visible = false;v.Box.Visible = false
        end
        if OnScreen == true and Esp.Settings.Sleeping == true and Distance <= Esp.Settings.RenderDistance then
            if sleeping == true then v.Sleeping.Text = "Sleeping" else v.Sleeping.Text = "Awake" end
            if Esp.Settings.TeamCheck == true and TeamTag == false then
                v.Sleeping.Visible = true
            elseif Esp.Settings.TeamCheck == true and TeamTag == true then
                v.Sleeping.Visible = false
            end
            if Esp.Settings.TargetSleepers == true and sleeping == true then v.Sleeping.Visible = false end

            v.Sleeping.Outline=Esp.Settings.TextOutline;v.Sleeping.Color=Esp.Settings.SleepingColor;v.Sleeping.Size=math.max(math.min(math.abs(Esp.Settings.TextSize*scale),Esp.Settings.TextSize),Esp.Settings.MinTextSize);v.Sleeping.Color = Esp.Settings.SleepingColor;v.Sleeping.Font=Esp.Settings.TextFont;v.Sleeping.Position = Vector2.new(x,math.floor(y-h*0.5-v.Sleeping.TextBounds.Y))
        else
            v.Sleeping.Visible=false
        end
        if OnScreen == true and Esp.Settings.Distances == true and Distance <= Esp.Settings.RenderDistance then
            if Esp.Settings.TeamCheck == true and TeamTag == false then
                v.Distance.Visible = true
            elseif Esp.Settings.TeamCheck == true and TeamTag == true then
                v.Distance.Visible = false
            end
            if Esp.Settings.TargetSleepers == true and sleeping == true then v.Distance.Visible = false end

            if Esp.Settings.Sleeping == false then
                v.Distance.Text = math.floor(Distance).."s"
            else
                v.Distance.Text = math.floor(Distance).."s"
            end
            v.Distance.Outline=Esp.Settings.TextOutline;v.Distance.Color=Esp.Settings.SleepingColor;v.Distance.Size=math.max(math.min(math.abs(Esp.Settings.TextSize*scale),Esp.Settings.TextSize),Esp.Settings.MinTextSize);v.Distance.Color = Esp.Settings.DistanceColor;v.Distance.Font=Esp.Settings.TextFont;v.Distance.Position = Vector2.new(x,math.floor(y+h*.5))
        else
            v.Distance.Visible = false
        end
        if OnScreen == true and Esp.Settings.Armour == true and Distance <= Esp.Settings.RenderDistance then
            if Character.Armor:FindFirstChildOfClass("Folder") then v.Armour.Text = "Armoured" else v.Armour.Text = "Naked" end
            if Esp.Settings.TeamCheck == true and TeamTag == false then v.Armour.Visible = true elseif Esp.Settings.TeamCheck == true and TeamTag == true then v.Armour.Visible = false else v.Armour.Visible = true end
            if Esp.Settings.TargetSleepers == true and sleeping == true then v.Armour.Visible = false end
            v.Armour.Outline=Esp.Settings.TextOutline;v.Armour.Size = math.max(math.min(math.abs(Esp.Settings.TextSize*scale),Esp.Settings.TextSize),Esp.Settings.MinTextSize);
            v.Armour.Position=Vector2.new(math.floor((BoxPosX+w)+v.Armour.TextBounds.X/10),BoxPosY+v.Armour.TextBounds.Y*1.55*0.5-((v.Armour.TextBounds.Y*2)*0.5));
            v.Armour.Color = Esp.Settings.ArmourColor;v.Armour.Font=Esp.Settings.TextFont
        else
            v.Armour.Visible = false
        end
        if OnScreen == true and Esp.Settings.ViewAngle == true and Distance <= Esp.Settings.RenderDistance then
            if Esp.Settings.TeamCheck == true and TeamTag == false then v.ViewAngle.Visible = true elseif Esp.Settings.TeamCheck == true and TeamTag == true then v.ViewAngle.Visible = false else v.ViewAngle.Visible = true end
            if Esp.Settings.TargetSleepers == true and sleeping == true then v.ViewAngle.Visible = false end
            v.ViewAngle.Color = Esp.Settings.ViewAngleColor;v.ViewAngle.Thickness=Esp.Settings.ViewAngleThickness;v.Transparency=Esp.Settings.ViewAngleTransparrency;
            local headpos = Camera:WorldToViewportPoint(Character.Head.Position)
            local offsetCFrame = CFrame.new(0, 0, -4)
            v.ViewAngle.From = Vector2.new(headpos.X, headpos.Y)
            local value = math.clamp(1/Distance*100, 0.1, 1)
            local dir = Character.Head.CFrame:ToWorldSpace(offsetCFrame)
            offsetCFrame = offsetCFrame * CFrame.new(0, 0, 0.4)
            local dirpos = Camera:WorldToViewportPoint(Vector3.new(dir.X, dir.Y, dir.Z))
            if OnScreen == true then
                v.ViewAngle.To = Vector2.new(dirpos.X, dirpos.Y)
                offsetCFrame = CFrame.new(0, 0, -4)
            end
        else
            v.ViewAngle.Visible = false
        end
    else
        v.Box.Visible=false;v.BoxOutline.Visible=false;v.Armour.Visible=false;v.Distance.Visible=false;v.ViewAngle.Visible=false;v.Sleeping.Visible=false;
    end
end
end

--Connections
local PlayerUpdater = game:GetService("RunService").RenderStepped
local PlayerConnection = PlayerUpdater:Connect(function()
Esp:UpdateEsp()
end)

--Init Functions
for i,v in pairs(workspace:GetChildren()) do
if v:FindFirstChild("HumanoidRootPart") then
    table.insert(cache,v)
    Esp:CreateEsp({model=v})
end
end

game:GetService("Workspace").ChildAdded:Connect(function(child)
if child:FindFirstChild("HumanoidRootPart") and not table.find(cache,child) then
    table.insert(cache,child)
    Esp:CreateEsp({model=child})
end
end)

local PlayerVisualTabbox = Tabs.Visual:AddLeftTabbox()
local PlayerVisualTab = PlayerVisualTabbox:AddTab('Players')
local PlayerSettingsVisualTab = PlayerVisualTabbox:AddTab('Settings')

PlayerVisualTab:AddToggle('Boxes',{Text='Boxes',Default=false}):AddColorPicker('BoxesColor',{Default=Color3.fromRGB(0,255,239),Title='Color'}):AddColorPicker('BoxesOutlineColor',{Default=Color3.fromRGB(0,0,0),Title='Color'})
PlayerVisualTab:AddToggle('Distances',{Text='Distance',Default=false}):AddColorPicker('DistancesColor',{Default=Color3.fromRGB(0,255,239),Title='Color'})
PlayerVisualTab:AddToggle('Sleeping',{Text='Sleeping',Default=false}):AddColorPicker('SleepingColor',{Default=Color3.fromRGB(0,255,239),Title='Color'})
PlayerVisualTab:AddToggle('Armour',{Text='Armour',Default=false}):AddColorPicker('ArmourColor',{Default=Color3.fromRGB(0,255,239),Title='Color'})
PlayerVisualTab:AddToggle('ViewAngle',{Text='View Angle',Default=false}):AddColorPicker('ViewAngleColor',{Default=Color3.fromRGB(0,255,239),Title='Color'})

--Esp Switches
Toggles.ViewAngle:OnChanged(function(Value)
Esp.Settings.ViewAngle = Value
end)
Options.ViewAngleColor:OnChanged(function(Value)
Esp.Settings.ViewAngleColor = Value
end)
Toggles.Armour:OnChanged(function(Value)
Esp.Settings.Armour = Value
end)
Options.ArmourColor:OnChanged(function(Value)
Esp.Settings.ArmourColor = Value
end)
Toggles.Armour:OnChanged(function(Value)
Esp.Settings.Armour = Value
end)
Toggles.Distances:OnChanged(function(Value)
Esp.Settings.Distances = Value
end)
Options.DistancesColor:OnChanged(function(Value)
Esp.Settings.DistanceColor = Value
end)
Options.BoxesColor:OnChanged(function(Value)
Esp.Settings.BoxesColor = Value
end)
Options.BoxesOutlineColor:OnChanged(function(Value)
Esp.Settings.BoxesOutlineColor = Value
end)
Toggles.Boxes:OnChanged(function(Value)
Esp.Settings.Boxes = Value
end)
Options.SleepingColor:OnChanged(function(Value)
Esp.Settings.SleepingColor = Value
end)
Toggles.Sleeping:OnChanged(function(Value)
Esp.Settings.Sleeping = Value
end)
PlayerSettingsVisualTab:AddSlider('RenderDistance', {Text='Render Distance',Default=1500,Min=1,Max=1500,Rounding=0,Compact=false,Suffix="s"}):OnChanged(function(Value)
Esp.Settings.RenderDistance = Value
end)
PlayerSettingsVisualTab:AddToggle('TargetSleepers',{Text='Dont Show Sleepers',Default=true}):OnChanged(function(Value)
Esp.Settings.TargetSleepers = Value
end)
PlayerSettingsVisualTab:AddToggle('BoxesOutlines',{Text='Box Outlines',Default=true}):OnChanged(function(Value)
Esp.Settings.BoxesOutline = Value
end)
PlayerSettingsVisualTab:AddToggle('TeamCheck',{Text='Team Check',Default=true}):OnChanged(function(Value)
Esp.Settings.TeamCheck = Value
end)
PlayerSettingsVisualTab:AddToggle('TextOutline',{Text='Text Outlines',Default=true}):OnChanged(function(Value)
Esp.Settings.TextOutline = Value
end)
PlayerSettingsVisualTab:AddToggle('Tool',{Text='Show Tool',Default=true}):OnChanged(function(Value)
Esp.Settings.TargetSleepers = Value
end)

--* velocity bar *--

local velocityBarTabBox = Tabs.Visual:AddRightTabbox('velocity bar')
local velocityBarTab = velocityBarTabBox:AddTab('Velocity Bars')

local velocityThreshold = 22.2
local airTimeThreshold = 6.8
local timeInAir = 0
local airTimeToggle = false
local velocityToggle = false

local screenGui = Instance.new("ScreenGui", game:GetService("Players").LocalPlayer.PlayerGui)
screenGui.IgnoreGuiInset = true
local airTimeFrame = Instance.new("Frame", screenGui)
airTimeFrame.Position = UDim2.new(0.35, 0, 0.052, 0)
airTimeFrame.Size = UDim2.new(0.3, 0, 0.006, 0)
airTimeFrame.BackgroundColor3 = Color3.new(0, 0, 0)
airTimeFrame.BackgroundTransparency = 0
airTimeFrame.BorderSizePixel = 0
airTimeFrame.Visible = false
local airTimeBar = Instance.new("Frame", airTimeFrame)
airTimeBar.Size = UDim2.new(0, 0, 0.25, 0)
airTimeBar.BorderSizePixel = 0
local velocityFrame = Instance.new("Frame", screenGui)
velocityFrame.Position = UDim2.new(0.35, 0, 0.03, 0)
velocityFrame.Size = UDim2.new(0.3, 0, 0.006, 0)
velocityFrame.BackgroundColor3 = Color3.new(0, 0, 0)
velocityFrame.BackgroundTransparency = 0
velocityFrame.BorderSizePixel = 0
velocityFrame.Visible = false
local velocityBar = Instance.new("Frame", velocityFrame)
velocityBar.Size = UDim2.new(0, 0, 0.25, 0)
velocityBar.BorderSizePixel = 0

velocityBarTab:AddToggle("", {Text = "fly bar",Default = false,}):OnChanged(function(state)
airTimeToggle = state
end)

velocityBarTab:AddToggle("", {Text = "velocity bar",Default = false,}):OnChanged(function(state)
velocityToggle = state
end)

local function updateBars(deltaTime)
if workspace.Ignore.LocalCharacter.Bottom.VelocityOverride.MaxForce == Vector3.new(10000, 0, 10000) then
timeInAir = timeInAir + deltaTime * 5.4
else
timeInAir = 0
end
if airTimeToggle then
airTimeFrame.Visible = true
local airTimeRatio = math.min(timeInAir / airTimeThreshold, 1)
airTimeBar.Size = UDim2.new(airTimeRatio, 0, 1, 0)
airTimeBar.BackgroundColor3 = Color3.fromHSV(0.33 * (1 - airTimeRatio), 1, 1)
else
airTimeFrame.Visible = false
end
if velocityToggle then
velocityFrame.Visible = true
local velocityMagnitude = CharcaterMiddle.Velocity.Magnitude
local velocityRatio = math.min(velocityMagnitude / velocityThreshold, 1)
velocityBar.Size = UDim2.new(velocityRatio, 0, 1, 0)
velocityBar.BackgroundColor3 = Color3.fromHSV(0.33 * (1 - velocityRatio), 1, 1)
else
velocityFrame.Visible = false
end
end
game:GetService("RunService").RenderStepped:Connect(function(deltaTime)
pcall(updateBars, deltaTime)
end)

--* Mod *--

local WeaponModsTabBox = Tabs.Combat:AddRightTabbox('weapon modifications')
local WeaponModsTab = WeaponModsTabBox:AddTab('weapon modifications')

local gunMods = {
noReloadanimTog = false,
noSpreadTog = false,
firerateMultiTog = false,
firerateMulti = 1,
}

local GunModsEnabled = false
WeaponModsTab:AddToggle('FireTypeEnabled', {Text = 'enabled', Default = false}):OnChanged(function(EnabledFireType)
GunModsEnabled = EnabledFireType
end)

local Recoil_Value = 2
WeaponModsTab:AddSlider('RecoilStrength', {Text = 'recoil:', Default = Recoil_Value, Min = 1, Max = 100, Suffix = "%", Rounding = 0, Compact = false}):OnChanged(function(Value)
Recoil_Value = Value / 50
end)

WeaponModsTab:AddToggle('NoSpread',{Text='no spread',Default=false}):OnChanged(function(Value)
gunMods.noSpreadTog = Value
end)

WeaponModsTab:AddToggle('Firerate',{Text='firerate',Default=false}):OnChanged(function(Value)
gunMods.firerateMultiTog = Value
end)

WeaponModsTab:AddSlider('firerateMultiS', {Text='Firerate Multiplier:',Default=0,Min=0,Max=1,Rounding=2,Compact=false}):OnChanged(function(Value)
gunMods.firerateMulti = Value
end)
local oldAttackCooldown;oldAttackCooldown = hookfunction(getupvalues(getrenv()._G.modules.FPS.ToolControllers.RangedWeapon.PlayerFire)[1],function(...)
local arg = {...}
if GunModsEnabled and gunMods.firerateMultiTog == true then
arg[2]['AttackCooldown'] = gunMods.firerateMulti
return oldAttackCooldown(unpack(arg))
end
return oldAttackCooldown(...)
end)

local ItemConfigs = game.ReplicatedStorage.ItemConfigs
local weapons = {PipePistol = require(ItemConfigs.PipePistol),Blunderbuss = require(ItemConfigs.Blunderbuss),Crossbow = require(ItemConfigs.Crossbow),Bow = require(ItemConfigs.Bow),USP9 = require(ItemConfigs.USP9),LeverActionRifle = require(ItemConfigs.LeverActionRifle),GaussRifle = require(ItemConfigs.GaussRifle)}
local FireActions = {Semi = "semi",Auto = "auto"}
WeaponModsTab:AddDropdown('FireTypeDropdown', {Values = {"Semi", "Auto"},Default = 1,Multi = false,Text = 'fire type:'}):OnChanged(function(Value)
if GunModsEnabled then
local fireAction = FireActions[Value]
for _, weapon in pairs(weapons) do
weapon.FireAction = fireAction
end
end
end)

-- Test
local SpinbotTabBox = Tabs.Combat:AddRightTabbox('spinbot')
local SpinbotTab = SpinbotTabBox:AddTab('spinbot')

local fakeduck = false
local Spinbot = false
local SpinbotSpeed = 3
local SpinbotType = "Normal"
local value = 1
local SpinBotLM = false
local SpinBotV = false
SpinbotTab:AddToggle('Spinbot',{Text='enabled',Default=false}):OnChanged(function(Value)
Spinbot = Value
end)

SpinbotTab:AddSlider('SpinbotSpeed', {Text='speed:',Default=3,Min=1,Max=3,Rounding=0,Compact=false,Thickness = 3}):OnChanged(function(Value)
SpinbotSpeed = Value
end)

SpinbotTab:AddDropdown('SpinbotType', {Values = {"Normal", "Desync", "Random"},Default = 1,Multi = false,Text = 'type:'}):OnChanged(function(Value)
SpinbotType = Value
end)

local OldSpinHook
OldSpinHook = hookfunction(game.Players.LocalPlayer:FindFirstChild("RemoteEvent").FireServer, function(self, ...)
local args = {...}
if args[1] and args[2] and args[1] == 1 and typeof(args[2]) == "Vector3" and args[4] and Spinbot == true then
if SpinBotLM == true and SpinbotType == "Desync" then
args[4] = value
value = value + SpinbotSpeed
elseif SpinbotType == "Normal" or SpinBotLM == false then
args[4] = value
value = value - SpinbotSpeed
end
end
if args[1] and args[2] and args[1] == 1 and typeof(args[2]) == "Vector3" and args[4] and Spinbot == true then
if SpinBotV == true and SpinbotType == "Desync" then
args[3] = 1.5000001192092896
elseif SpinbotType == "Normal" or SpinBotV == false then
args[3] = -1.5000001192092896
elseif SpinbotType == "Random" or SpinBotV == false then
args[3] = -1.5000001192092896
end
end
return OldSpinHook(self, unpack(args))
end)
task.spawn(function()
while task.wait() do
if SpinbotType == "Desync" then
SpinBotV = not SpinBotV
end
end
end)
task.spawn(function()
while task.wait(0.1) do
if SpinbotType == "Desync" or SpinbotType == "Random" then
SpinBotLM = not SpinBotLM
end
end
end)

SpinbotTab:AddToggle('FakeCrouch', {Text = 'fake duck',Default = false,Tooltip = 'Makes u crouch for other people also they cant hear your footsteps'})
local OldCrouchHook; OldCrouchHook = hookfunction(game:GetService("Players").LocalPlayer:FindFirstChild("RemoteEvent").FireServer, function(self, ...)
local args = {...}
if args[1] == 2 and fakeduck == true then
args[2] = true
end
return OldCrouchHook(self, unpack(args))
end)
Toggles.FakeCrouch:OnChanged(function() fakeduck = Toggles.FakeCrouch.Value end)
local function onFakeLagToggled(value)
local networkClient = game:GetService("NetworkClient")
networkClient:SetOutgoingKBPSLimit(value and 1 or 100)
end
SpinbotTab:AddToggle('FakeLag', {Text = 'fake lag', Default = false}):OnChanged(onFakeLagToggled)

--* Hitbox *--
local HeadHitboxTabBox = Tabs.Combat:AddLeftTabbox('hitbox expander')
local HeadHitboxTab = HeadHitboxTabBox:AddTab('Hitbox Expander')

local hbExpander = {
HeadExtends = false,
XSize = 5,
YSize = 5,
ZSize = 5,
HitboxTransparency = 50,
}

local HedsOn = Instance.new("Part")
local HBXColor = Color3.fromRGB(208,123,255)
local HBXMaterial = "ForceField"
HedsOn.Name = "HedsOn"
HedsOn.Anchored = false
HedsOn.CanCollide = false
HedsOn.Transparency = hbExpander.HitboxTransparency
HedsOn.Color = HBXColor
HedsOn.Material = HBXMaterial
HedsOn.Size = Vector3.new(5, 5, 10)
HedsOn.Parent = game.ReplicatedStorage

HeadHitboxTab:AddToggle('HBO',{Text='enabled',Default=false}):AddColorPicker('HBX_Color',{Default=Color3.fromRGB(208, 123, 255),Title='Color'}):OnChanged(function(Value)
hbExpander.HeadExtends = Value
end)
Options.HBX_Color:OnChanged(function(Value)
HBXColor = Value
end)

HeadHitboxTab:AddDropdown('', {Values = {"ForceField", "Neon", "CrackedLava"}, Default = 1, Multi = false, Text = 'material:'}):OnChanged(function(Dropdown)
HBXMaterial = Dropdown
end)

HeadHitboxTab:AddSlider('HitboxXSize_Slider', {Text = 'hitbox width:', Default = 10, Min = 0, Max = 13.5, Rounding = 2, Suffix = "%", Compact = false}):OnChanged(function(HitboxXSize)
hbExpander.XSize = HitboxXSize
hbExpander.ZSize = HitboxXSize
end)

HeadHitboxTab:AddSlider('HitboxYSize_Slider', {Text = 'hitbox height:', Default = 10, Min = 0, Max = 13.5, Rounding = 2, Suffix = "%", Compact = false}):OnChanged(function(HitboxYSize)
hbExpander.YSize = HitboxYSize
hbExpander.ZSize = HitboxYSize
end)

HeadHitboxTab:AddSlider('HitboxXSize_Slider', {Text = 'transparency:', Default = 50, Min = 0, Max = 100, Rounding = 0, Suffix = "%", Compact = false}):OnChanged(function(TransparencyValue)
hbExpander.HitboxTransparency = TransparencyValue / 100
end)

task.spawn(function()
while task.wait() do
if hbExpander.HeadExtends then
for _, i in ipairs(game:GetService("Workspace"):GetChildren()) do
    if i:FindFirstChild("HumanoidRootPart") and not i:FindFirstChild("HedsOn") then
        local BigHeadsPart = Instance.new("Part");BigHeadsPart.Name = "Torso";BigHeadsPart.Anchored = false;BigHeadsPart.CanCollide = false;BigHeadsPart.Transparency = hbExpander.HitboxTransparency;BigHeadsPart.Size = Vector3.new(hbExpander.XSize, hbExpander.YSize, hbExpander.ZSize);BigHeadsPart.Material=HBXMaterial;BigHeadsPart.Color = HBXColor
        local DeletePart = Instance.new("Weld");DeletePart.Parent = BigHeadsPart;DeletePart.Name = "FAKEHEAD"
        local HeadsParts = BigHeadsPart:Clone();HeadsParts.Parent = i;HeadsParts.Orientation = i.HumanoidRootPart.Orientation
        local clonedHedsOn = HedsOn:Clone();clonedHedsOn.Parent = i
        local Headswelding = Instance.new("Weld");Headswelding.Parent = HeadsParts;Headswelding.Part0 = i.HumanoidRootPart;Headswelding.Part1 = HeadsParts
        HeadsParts.Position = Vector3.new(i.HumanoidRootPart.Position.X, i.HumanoidRootPart.Position.Y - 0.6, i.HumanoidRootPart.Position.Z)
    end
end
else
for _, i in ipairs(game:GetService("Workspace"):GetChildren()) do
    if i:FindFirstChild("HumanoidRootPart") and i:FindFirstChild("HedsOn") then
        i.HedsOn:Remove()
        for _, a in ipairs(i:GetChildren()) do
            if a.Name == "Torso" and a:FindFirstChild("FAKEHEAD") and (not a:FindFirstChild("Nametag") or not a:FindFirstChild("Face")) then
                a:Remove()
            end
        end
    end
end
end
end
end)

--* Kill aura* --
local KillAuraTabBox = Tabs.Combat:AddLeftTabbox('kill aura')
local KillAuraTab = KillAuraTabBox:AddTab('Kill Aura')

function Functions:GetLocalToolName()
if getrenv()._G.modules.FPS.GetEquippedItem() == nil then return 0,0 end
local mod = require(game:GetService("ReplicatedStorage").ItemConfigs[getrenv()._G.modules.FPS.GetEquippedItem().id])
for i,v in pairs(mod) do
if i == "HandModel" then
return mod.HandModel
end
end
return 0,0
end
local killauradistance = 8
local function GetPlayer()
local closest,PlayerDistance,playerTable = nil,math.huge,nil
for i,v in pairs(getupvalues(getrenv()._G.modules.Player.GetPlayerModel)[1]) do
if v.model:FindFirstChild("HumanoidRootPart") then
local Mouse = game.Players.LocalPlayer:GetMouse()
local pos,OnScreen = Camera.WorldToViewportPoint(Camera, v.model:GetPivot().Position)
local PlayerDistance = (CharcaterMiddle:GetPivot().Position-v.model:GetPivot().Position).Magnitude
Distance = (game.Workspace.Ignore.LocalCharacter.Middle.Position - v.model:GetPivot().Position).Magnitude
if PlayerDistance <= killauradistance and OnScreen == true then
    closest = v.model;PlayerDistance = PlayerDistance;playerTable=v
end
end
end
return closest,playerTable
end

local KAHitPartSelected = "Head"
local Wait = 0.95
local AuraGoodToUse = false
KillAuraTab:AddToggle('KillAura',{Text='kill aura',Default=false}):AddKeyPicker('KillAuraKey', {Default='Non',SyncToggleState=true,Mode='Toggle',Text='Kill Aura',NoUI=false})
local PlayerID = nil
local Bypass; Bypass = hookfunction(game:GetService("Players").LocalPlayer:FindFirstChild("RemoteEvent").FireServer,function(self, ...)
local args = {...}
if args[1] == 10 and args[2] == "Hit" then
PlayerID = args[3]
end
return Bypass(self, unpack(args))
end)
task.spawn(function()
while task.wait() do
local state = Options.KillAuraKey:GetState()
if state then
local PlayerHumanoid,fr = GetPlayer()
if PlayerHumanoid and AuraGoodToUse and PlayerHumanoid ~= nil and fr ~= nil then
game:GetService("Players").LocalPlayer.RemoteEvent:FireServer(10, "Swing")
game:GetService("Players").LocalPlayer.RemoteEvent:FireServer(10, "Hit", fr.id, PlayerHumanoid.HumanoidRootPart.Position, KAHitPartSelected, Vector3.new(-0.1275634765625, 0.5433349609375, -0.237548828125))
wait(Wait)
end
end
end
end)
task.spawn(function()
while task.wait() do
local Weapon = Functions:GetLocalToolName()
if Weapon == "MiningDrill" then
Wait = 0.12
else
Wait = 0.95
end
if Weapon == "Hammer" or "Crowbar" or "StoneHammer" or "SteelHammer" or "MiningDrill" or "IronHammer" or "Kabar" then
AuraGoodToUse = true
else
AuraGoodToUse = false
end
end
end)

KillAuraTab:AddSlider('', {Text = 'distance:', Default = 8, Min = 5, Max = 10, Rounding = 0, Suffix = " studs", Compact = false}):OnChanged(function(Value)
killauradistance = Value
end)

KillAuraTab:AddDropdown('', {Values = {"Head", "HumanoidRootPart", "Torso", "LowerTorso", "RightHand", "LeftHand", "RightFoot", "LeftFoot"}, Default = 1, Multi = false, Text = 'hitpart:'}):OnChanged(function(Value)
KAHitPartSelected = Value
end)

--/EXPLOITS\--


local ExploitsTabBox = Tabs.Misc:AddLeftTabbox('Exploits')
local ExploitsTab = ExploitsTabBox:AddTab('Exploits')

local LongNeckEnabled = false
local UpperLimitDefault = 3
local LowerLimitDefault = 1.75
local CurrentSliderValue = 1.75

ExploitsTab:AddToggle('LongNeck', {Text = 'long neck', Default = false, Tooltip}):AddKeyPicker('LongNeckKey', {Default = 'Non', SyncToggleState = true, Mode = 'Toggle', Text = 'Long Neck', NoUI = false}):OnChanged(function(value)
LongNeckEnabled = value
if not LongNeckEnabled then
game:GetService("Workspace").Ignore.LocalCharacter.Bottom.PrismaticConstraint.UpperLimit = UpperLimitDefault
game:GetService("Workspace").Ignore.LocalCharacter.Bottom.PrismaticConstraint.LowerLimit = LowerLimitDefault
else
game:GetService("Workspace").Ignore.LocalCharacter.Bottom.PrismaticConstraint.UpperLimit = CurrentSliderValue
game:GetService("Workspace").Ignore.LocalCharacter.Bottom.PrismaticConstraint.LowerLimit = CurrentSliderValue
end
end)

ExploitsTab:AddSlider('HeightChangerSlider', {Text = 'height:', Suffix = "m", Default = 4.25, Min = 0, Max = 8.5, Rounding = 2, Compact = false}):OnChanged(function(Value)
CurrentSliderValue = Value
if LongNeckEnabled then
game:GetService("Workspace").Ignore.LocalCharacter.Bottom.PrismaticConstraint.LowerLimit = Value
game:GetService("Workspace").Ignore.LocalCharacter.Bottom.PrismaticConstraint.UpperLimit = Value
end
end)

ExploitsTab:AddToggle('', {Text = "Jump Crouch",Default = false,}):AddKeyPicker('JumpCrouchKey', {Default='Q',SyncToggleState=true,Mode='Toggle',Text='Jump Crouch',NoUI=false})
local stoprun = false
task.spawn(function()
while true do
local state = Options.JumpCrouchKey:GetState()
if state then
keypress(0x57)
keypress(0x10)
wait(0.05)
keypress(0x43)
keypress(0x20)
keyrelease(0x20)
wait(0.5)
keyrelease(0x43)
wait(1)
end
if Library.Unloaded then break end
wait()
end
end)
task.spawn(function()
while task.wait() do
local state = Options.JumpCrouchKey:GetState()
if not state then
if stoprun then
keyrelease(0x57)
keyrelease(0x10)
stoprun = false
end
else
stoprun = true
end
end
end)

--* Speedhack *--

local qf = {
Settings = {
SpeedHackEnabled = false,
SpeedHackSpeed = 30,
}
}

ExploitsTab:AddToggle("SpeedHack", { Text = "speedhack", Default = false }):AddKeyPicker("SpeedHackKey",{ Default = "H", SyncToggleState = false, Mode = "Toggle", Text = "Speed Boost", NoUI = false })
ExploitsTab:AddSlider("SpeedHackSpeed", { Text = "speed:", Suffix = "%",Default = 17, Min = 1, Max = 34, Rounding = 0,Compact = false}):OnChanged(function(G) qf.Settings.SpeedHackSpeed = G; end)
Toggles.SpeedHack:OnChanged(function(G)
qf.Settings.SpeedHackEnabled = G
end)
local nT, OT, JT = true, false, false;
game:GetService("RunService").RenderStepped:Connect(function(G)
if qf.Settings.SpeedHackEnabled == true and OT == true then
for w, m in pairs(game.Workspace.Ignore.LocalCharacter:GetChildren()) do
m.CFrame = m.CFrame + game.Workspace.CurrentCamera.CFrame.LookVector * qf.Settings.SpeedHackSpeed * G
end
end
end)
game:GetService("UserInputService").InputBegan:Connect(function(G)
if Options.SpeedHackKey:GetState() == true then
if nT == true then
nT, JT = false, true
elseif nT == false then
nT, JT = true, false
end
end
end)
game:GetService("UserInputService").InputBegan:Connect(function(G)
if G.KeyCode == Enum.KeyCode.C and JT then
OT = true
end
end)
game:GetService("UserInputService").InputEnded:Connect(function(G)
if G.KeyCode == Enum.KeyCode.C then
OT = false
end
end)

--* X-Ray *--

local antixray
antixray = hookmetamethod(game, "__index", newcclosure(function(...)
local self, k = ...
if not checkcaller() and k == "Hitbox" and self.Name == "Transparency" then
return 0
end
return antixray(...)
end))

local XRayEnabled = false
local CurrentSliderValue = 50
ExploitsTab:AddToggle('Xray', {Text = 'Xray', Default = false, Tooltip}):AddKeyPicker('XRayKey', {Default = 'Non', SyncToggleState = true, Mode = 'Toggle', Text = 'X-Ray', NoUI = true}):OnChanged(function(value)
XRayEnabled = value
if XRayEnabled then
for i,v in pairs(game:GetService("Workspace"):GetChildren()) do
if v:FindFirstChild("Hitbox") then
v.Hitbox.Transparency = CurrentSliderValue
end
end
else
for i,v in pairs(game:GetService("Workspace"):GetChildren()) do
if v:FindFirstChild("Hitbox") then
v.Hitbox.Transparency = 0
end
end
end
end)

ExploitsTab:AddSlider('XrayChangerSlider', {Text = 'Transparency:', Suffix = "%", Default = 50, Min = 0, Max = 100, Rounding = 0, Compact = false}):OnChanged(function(Value)
CurrentSliderValue = Value / 100
if XRayEnabled then
CurrentSliderValue = Value / 100
end
end)

ExploitsTab:AddToggle('sussycrouching', {Text = "Instant Crouch",Default = false,Tooltip = "Crouch Way Faster",}):OnChanged(function(QuickCrouch1)
if QuickCrouch1 == true then
game:GetService("Workspace").Ignore.LocalCharacter.Top.CrouchForce.Stiffness = 10000
else
game:GetService("Workspace").Ignore.LocalCharacter.Top.CrouchForce.Stiffness = 100
end
end)

ExploitsTab:AddToggle('',{Text='Freeze',Default=false}):AddKeyPicker('', {Default='Non',SyncToggleState=true,Mode='Toggle',Text='Freeze',NoUI=false}):OnChanged(function(Value)
if Value then
CharcaterMiddle.Anchored = true
else
CharcaterMiddle.Anchored = false
end
end)

local deleteWallsEnabled = false
ExploitsTab:AddToggle('', {Text = "delete walls",Default = false,Tooltip = "Left Click / Mouse Button 2 (MB2)",}):OnChanged(function(value)
deleteWallsEnabled = value
end)
local Mouse = game.Players.LocalPlayer:GetMouse()
Mouse.Button1Down:connect(function()
if deleteWallsEnabled then
if not Mouse.Target then
return
end
local targetName = Mouse.Target.Name
local allowedNames = {"Hitbox", "LeftWall", "RightWall", "LeftHinge", "Prim", "RightHinge"}
for _, name in ipairs(allowedNames) do
if targetName == name then
Mouse.Target:Destroy()
break
end
end
end
end)

local ComExtraTabBox = Tabs.Misc:AddRightTabbox('extra')
local ComExtraTab = ComExtraTabBox:AddTab('extra')

--* Extra *--

ComExtraTab:AddToggle('BloodSplatter', {Text = 'Remove In-Game BLood', Default = false}):OnChanged(function(BloodSplatter_Toggle)
if BloodSplatter_Toggle == false then
game:GetService("Players").LocalPlayer.PlayerGui.GameUI.BloodSplatter.Visible = true
elseif BloodSplatter_Toggle == true then
game:GetService("Players").LocalPlayer.PlayerGui.GameUI.BloodSplatter.Visible = false
end
end)

ComExtraTab:AddLabel('Loot All'):AddKeyPicker('gakb', { Default = 'F', SyncToggleState = false, Mode = 'Toggle', Text = 'loot all', NoUI = true })
Options.gakb:OnClick(function()
for i = 1, 20 do
wait(0.03)
local ohNumber1 = 12
local ohNumber2 = i
local ohBoolean3 = true
game:GetService("Players").LocalPlayer.RemoteEvent:FireServer(ohNumber1, ohNumber2, ohBoolean3)
end
end)

ComExtraTab:AddLabel('Deposit All'):AddKeyPicker('gazkb', { Default = 'Non', SyncToggleState = false, Mode = 'Toggle', Text = 'deposit all', NoUI = true })
Options.gazkb:OnClick(function()
for i = 1, 20 do
wait(0.03)
local ohNumber1 = 12
local ohNumber2 = i
local ohBoolean3 = false
game:GetService("Players").LocalPlayer.RemoteEvent:FireServer(ohNumber1, ohNumber2, ohBoolean3)
end
end)

--* Overwriters *--

local HitboxOverrideTabBox = Tabs.Combat:AddLeftTabbox('hitbox overrider')
local HitboxOverrideTab = HitboxOverrideTabBox:AddTab('hitbox overrider')

--* Hitbox Overrider *--

local HBO2 = false
local HBO2H = 100
local HBO2P = "Head"
HitboxOverrideTab:AddToggle('',{Text='enabled',Default=false}):OnChanged(function(Value)
HBO2 = Value;
end)

HitboxOverrideTab:AddSlider('', {Text='hitchance:',Default=100,Min=0,Max=100,Rounding=0,Compact=false,Suffix="%"}):OnChanged(function(Value)
HBO2H = Value;
end)

HitboxOverrideTab:AddDropdown('', {Values = {"Head", "HumanoidRootPart", "Torso", "Random"},Default = 1,Multi = false,Text = 'hitpart:'}):OnChanged(function(Value)
HBO2P = Value
end)

LPH_NO_VIRTUALIZE(function()
local Bypass22; Bypass22 = hookfunction(game.Players.LocalPlayer:FindFirstChild("RemoteEvent").FireServer,function(self, ...)
local args = {...}
if args[1] == 10 and args[2] == "Hit" and (args[6] == "Head" or args[6] == "Torso" or args[6] == "HumanoidRootPart" or args[6] == "RightUpperArm" or args[6] == "RightLowerArm" or args[6] == "LeftUpperArm" or args[6] == "LeftLowerArm" or args[6] == "RightUpperLeg" or args[6] == "RightLowerLeg" or args[6] == "LeftUpperLeg" or args[6] == "LeftLowerLeg" or args[6] == "LeftFoot" or args[6] == "RightFoot") and HBO2 then
local bodyParts = { {part = "Head", probability = 10}, {part = "Torso", probability = 20}, {part = "HumanoidRootPart", probability = 5}, {part = "RightUpperArm", probability = 15}, {part = "RightLowerArm", probability = 10}, {part = "LeftUpperArm", probability = 15}, {part = "LeftLowerArm", probability = 10}, {part = "RightUpperLeg", probability = 5}, {part = "RightLowerLeg", probability = 5}, {part = "LeftUpperLeg", probability = 5}, {part = "LeftLowerLeg", probability = 5}, {part = "LeftFoot", probability = 5}, {part = "RightFoot", probability = 5} }
local totalProbability = 0
for _, bodyPartInfo in ipairs(bodyParts) do
totalProbability = totalProbability + bodyPartInfo.probability
end
local randomNum = math.random(1, totalProbability)
local selectedPart
local accumulatedProbability = 0
for _, bodyPartInfo in ipairs(bodyParts) do
accumulatedProbability = accumulatedProbability + bodyPartInfo.probability
if randomNum <= accumulatedProbability then
    selectedPart = bodyPartInfo.part
    break
end
end
if math.random(0, 100) <= HBO2H then
if HBO2P == "Head" then
    args[6] = "Head"
elseif HBO2P == "HumanoidRootPart" then
    args[6] = "HumanoidRootPart"
elseif HBO2P == "Torso" then
    args[6] = "Torso"
elseif HBO2P == "Random" then
    args[6] = selectedPart
end
end
end
return Bypass22(self, unpack(args))
end)
local _Network = getrenv()._G.modules.Network
local old = _Network.Send
_Network.Send = function(...)
local args = {...}
if args[1] == 10 and args[2] == "Hit" and (args[6] == "Head" or args[6] == "Torso" or args[6] == "HumanoidRootPart" or args[6] == "RightUpperArm" or args[6] == "RightLowerArm" or args[6] == "LeftUpperArm" or args[6] == "LeftLowerArm" or args[6] == "RightUpperLeg" or args[6] == "RightLowerLeg" or args[6] == "LeftUpperLeg" or args[6] == "LeftLowerLeg" or args[6] == "LeftFoot" or args[6] == "RightFoot") and HBO2 then
local bodyParts = { {part = "Head", probability = 10}, {part = "Torso", probability = 20}, {part = "HumanoidRootPart", probability = 5}, {part = "RightUpperArm", probability = 15}, {part = "RightLowerArm", probability = 10}, {part = "LeftUpperArm", probability = 15}, {part = "LeftLowerArm", probability = 10}, {part = "RightUpperLeg", probability = 5}, {part = "RightLowerLeg", probability = 5}, {part = "LeftUpperLeg", probability = 5}, {part = "LeftLowerLeg", probability = 5}, {part = "LeftFoot", probability = 5}, {part = "RightFoot", probability = 5} }
local totalProbability = 0
for _, bodyPartInfo in ipairs(bodyParts) do
totalProbability = totalProbability + bodyPartInfo.probability
end
local randomNum = math.random(1, totalProbability)
local selectedPart
local accumulatedProbability = 0
for _, bodyPartInfo in ipairs(bodyParts) do
accumulatedProbability = accumulatedProbability + bodyPartInfo.probability
if randomNum <= accumulatedProbability then
    selectedPart = bodyPartInfo.part
    break
end
end
if math.random(0, 100) <= HBO2H then
if HBO2P == "Head" then
    args[6] = "Head"
elseif HBO2P == "HumanoidRootPart" then
    args[6] = "HumanoidRootPart"
elseif HBO2P == "Torso" then
    args[6] = "Torso"
elseif HBO2P == "Random" then
    args[6] = selectedPart
end
end
end
return old(unpack(args))
end
end)()

--* Trash Talk *--

local TrashTalkTabBox = Tabs.World:AddRightTabbox('trash talk')
local TrashTalkTab = TrashTalkTabBox:AddTab('AutoToxic')

local Trashtalk = false
local Chats = {
["Shibahub"] = {"Ez, shouldve owned shibahub"};
}

local _Network = getrenv()._G.modules.Network
local _SendCodes = getrenv()._G.modules.Network.SendCodes
game:GetService("LogService").MessageOut:Connect(function(message)
local extractedName = message:match("->([%w_]+)")
local initialHealth, finalHealth = message:match("(%-?%d+%.?%d*)%D*->(%-?%d+%.?%d*)hp")
local studsValue = message:match("(%d+%.?%d*)s")
if Trashtalk and extractedName and initialHealth and finalHealth and studsValue and extractedName ~= game.Players.LocalPlayer.Name then
if Trashtalk and tonumber(finalHealth) <= 0 then
_Network.Send(_SendCodes.SEND_CHAT_MESSAGE, extractedName .. " Beamed At " .. studsValue .. "m, " .. Chats["Shibahub"][math.random(1, #Chats["Shibahub"])] .. "", "Global")
end
end
end)

local enabledspamchat = false
local chatSpammerText = ""
local WaitTime = 3
local function spamChat()
local args = {[1] = 27, [2] = chatSpammerText, [3] = "Global"}
while enabledspamchat do
game:GetService("Players").LocalPlayer.RemoteEvent:FireServer(unpack(args))
wait(WaitTime)
end
end

TrashTalkTab:AddToggle('Enabled_Toggle1', {Text = 'enabled', Default = false}):OnChanged(function(value)
Trashtalk = value
enabledspamchat = value
end)

TrashTalkTab:AddDropdown('', {Values = { 'None','Trash Talk', 'Chat Spammer' }, Default = 1, Multi = false, Text = 'type:'}):OnChanged(function(bool2)
if bool2 == "None" then
Trashtalk = false
enabledspamchat = false
elseif bool2 == "Trash Talk" then
Trashtalk = true
elseif bool2 == "Chat Spammer" then
spamChat()
end
end)

TrashTalkTab:AddSlider('SpamChatSpeed', {Text = 'speed:',Suffix = "s", Default = 3, Min = 1, Max = 10, Rounding = 0, Compact = false,}):OnChanged(function(SpamChatSpeedValue)
WaitTime = SpamChatSpeedValue
end)

TrashTalkTab:AddInput('ChatSpammer', {Default = "[Shibahub] Gaming", Numeric = false, Finished = true, Text = 'chat spammer:', Placeholder = "Chat Spam Custom Text [HERE]"}):OnChanged(function(value)
chatSpammerText = value
end)

--* 

--* HUD *--

local HUDTabBox = Tabs.Local:AddRightTabbox('HUD')
local HUDTab = HUDTabBox:AddTab('HUD')

HUDTab:AddToggle('AWASZnfh', {Text = "Remove Server Info",Default = false,Tooltip = "Hides Server Info",}):OnChanged(function(Chillax1)
if Chillax1 == true then
game:GetService("Players").LocalPlayer.PlayerGui.GameUI.ServerInfo.Visible = false
elseif Chillax1 == false then
game:GetService("Players").LocalPlayer.PlayerGui.GameUI.ServerInfo.Visible = true
end
end)

HUDTab:AddToggle('AWAaSZasanfh', {Text = "Remove Server Status",Default = false,Tooltip = "Hides Server Status",}):OnChanged(function(Chillax2)
if Chillax2 == true then
game:GetService("Players").LocalPlayer.PlayerGui.GameUI.ServerStatus.Visible = false
elseif Chillax2 == false then
game:GetService("Players").LocalPlayer.PlayerGui.GameUI.ServerStatus.Visible = true
end
end)

HUDTab:AddToggle('GnAf', {Text = "Hide Chat",Default = false,Tooltip = "Hides chat )",}):OnChanged(function(HideChat)
if HideChat == true then
game:GetService("Players").LocalPlayer.PlayerGui.GameUI.Chat.Position = UDim2.new(0, 0, 1, 0)
elseif HideChat == false then
game:GetService("Players").LocalPlayer.PlayerGui.GameUI.Chat.Position = UDim2.new(0, 0, 0, 0)
end
end)

HUDTab:AddLabel('Custom Inventory Color:'):AddColorPicker('Inventory_Color', { Default = Color3.fromRGB(80,80,80)})
Options.Inventory_Color:OnChanged(function(Inventory_Color_Value)
local hotbar = game:GetService("Players").LocalPlayer.PlayerGui.GameUI.FPS.BottomCenter
for i = 26, 29 do
hotbar.Armor["ItemSlot" .. i].BackgroundColor3 = Inventory_Color_Value
end
for i = 6, 25 do
hotbar.Inventory["ItemSlot" .. i].BackgroundColor3 = Inventory_Color_Value
end
end)

HUDTab:AddLabel('Energy Color:'):AddColorPicker('Energy_Color_Value', { Default = Color3.fromRGB(197,187,40)})
Options.Energy_Color_Value:OnChanged(function(Energy_Color_Value)
game:GetService("Players").LocalPlayer.PlayerGui.GameUI.FPS.Vitals.EnergyFrame.Energy.BackgroundColor3 = Energy_Color_Value
end)

HUDTab:AddLabel('Health Color:'):AddColorPicker('Health_Color_Value', { Default = Color3.fromRGB(78,153,74)})
Options.Health_Color_Value:OnChanged(function(Health_Color_Value)
game:GetService("Players").LocalPlayer.PlayerGui.GameUI.FPS.Vitals.HealthFrame.Health.BackgroundColor3 = Health_Color_Value
end)

HUDTab:AddLabel('Ammo Color:'):AddColorPicker('Ammo_Color_Value', { Default = Color3.fromRGB(255,255,255)})
Options.Ammo_Color_Value:OnChanged(function(Ammo_Color_Value)
game:GetService("Players").LocalPlayer.PlayerGui.GameUI.FPS.BottomCenter.Ammo.TextColor3 = Ammo_Color_Value
end)

HUDTab:AddSlider('Vitals_Transparency', {Text = 'Vitals Transparency', Suffix = "%", Default = 10, Min = 0, Max = 100, Rounding = 0, Compact = true}):OnChanged(function(VitalsTransparency)
game:GetService("Players").LocalPlayer.PlayerGui.GameUI.FPS.Vitals.EnergyFrame.Energy.BackgroundTransparency = VitalsTransparency / 100
game:GetService("Players").LocalPlayer.PlayerGui.GameUI.FPS.Vitals.HealthFrame.Health.BackgroundTransparency = VitalsTransparency / 100
end)

HUDTab:AddSlider('Background_Transparency', {Text = 'Inventory Transparency', Suffix = "%", Default = 70, Min = 0, Max = 100, Rounding = 0, Compact = true}):OnChanged(function(InventoryTransparency)
game:GetService("Players").LocalPlayer.PlayerGui.GameUI.FPS.BottomCenter.Inventory.BackgroundTransparency = InventoryTransparency / 100
game:GetService("Players").LocalPlayer.PlayerGui.GameUI.FPS.BottomCenter.Hotbar.BackgroundTransparency = InventoryTransparency / 100
game:GetService("Players").LocalPlayer.PlayerGui.GameUI.FPS.BottomCenter.Armor.BackgroundTransparency = InventoryTransparency / 100
end)

--* Gravity *--

local GravityTabBox = Tabs.World:AddLeftTabbox('gravity')
local GravityTab = GravityTabBox:AddTab('Gravity')

local GravityEnabled = false
local defaultGravity = 75
local CurrentSliderValue2 = 75

GravityTab:AddToggle('Gravity', {Text = 'enabled', Default = false, Tooltip}):AddKeyPicker('GravityKey', {Default = 'Non', SyncToggleState = true, Mode = 'Toggle', Text = 'Gravity', NoUI = true}):OnChanged(function(value)
GravityEnabled = value
if not GravityEnabled then
sethiddenproperty(game:GetService("Workspace"), "Gravity", defaultGravity)
else
sethiddenproperty(game:GetService("Workspace"), "Gravity", CurrentSliderValue2)
end
end)

GravityTab:AddSlider('GravityChangerSlider', {Text = 'gravity:', Suffix = "x", Default = defaultGravity, Min = 65, Max = 100, Rounding = 0, Compact = false}):OnChanged(function(Value)
CurrentSliderValue2 = Value
if GravityEnabled then
sethiddenproperty(game:GetService("Workspace"), "Gravity", Value)
end
end)

--* Crosshair *--

local CrossHairX = Drawing.new("Circle"), Drawing.new("Circle")
--
CrossHairX.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
CrossHairX.Thickness = 1
CrossHairX.ZIndex = 3

do
ComExtraTab:AddToggle('zCrosshairX_Toggle', {Text = 'Enabled', Default = false}):AddColorPicker("eCrosshairX_Color", {Default = Color3.fromRGB(208, 123, 255)}):OnChanged(function()
CrossHairX.Visible = Toggles.zCrosshairX_Toggle.Value
end)

Options.eCrosshairX_Color:OnChanged(function()
CrossHairX.Color = Options.eCrosshairX_Color.Value
end)

ComExtraTab:AddToggle('Crosshair_Filled1', {Text = 'Filled', Default = false}):OnChanged(function()
CrossHairX.Filled = Toggles.Crosshair_Filled1.Value
end)

ComExtraTab:AddSlider('Crosshair_Radius', {Text = 'Size', Suffix = "°", Default = 2, Min = 0, Max = 100, Rounding = 0, Compact = true}):OnChanged(function(CrosshairXRadius)
CrossHairX.Radius = CrosshairXRadius
end)
end

--* Skinbox *--

local SkinChangerTabBox = Tabs.Local:AddLeftTabbox('skinbox')
local SkinChangerTab = SkinChangerTabBox:AddTab('Skinbox')

local SkinChoice = "Galaxy"
local SkinsEnabled = false

function CheckSkins()
local tbl = {}
for i, v in pairs(game:GetService("ReplicatedStorage").ItemSkins:GetChildren()) do
table.insert(tbl, v.Name)
end
return tbl
end
function SetCammo(SkinName)
if not require(game:GetService("ReplicatedStorage").ItemConfigs[getrenv()._G.modules.FPS.GetEquippedItem().id]).HandModel then
return
end
local GunName = require(game:GetService("ReplicatedStorage").ItemConfigs[getrenv()._G.modules.FPS.GetEquippedItem().id]).HandModel
if table.find(CheckSkins(), GunName) then
local SkinFolder = game:GetService("ReplicatedStorage").ItemSkins[GunName]
local AnimationModule = require(SkinFolder:FindFirstChild("AnimatedSkinPrefab"))
if SkinName == "Lightning" then
AnimationModule.ApplyToModel(workspace.Ignore.FPSArms.HandModel, "rbxassetid://6555500992", 1, 0.3)
elseif SkinName == "Galaxy" then
AnimationModule.ApplyToModel(workspace.Ignore.FPSArms.HandModel, "rbxassetid://9305457875", 1, 0.3)
elseif SkinName == "Swirl" then
AnimationModule.ApplyToModel(workspace.Ignore.FPSArms.HandModel, "rbxassetid://13199296652", 1, 0.3)
elseif SkinName == "Wavey" then
AnimationModule.ApplyToModel(workspace.Ignore.FPSArms.HandModel, "rbxassetid://13898657945", 1, 0.3)
elseif SkinName == "RedGalaxy" then
AnimationModule.ApplyToModel(workspace.Ignore.FPSArms.HandModel, "rbxassetid://1619172543", 1, 0.3)
elseif SkinName == "Marble" then
AnimationModule.ApplyToModel(workspace.Ignore.FPSArms.HandModel, "rbxassetid://8904067198", 1, 0.01)
elseif SkinName == "Lava" then
AnimationModule.ApplyToModel(workspace.Ignore.FPSArms.HandModel, "rbxassetid://7077560268", 1, 0.3)
elseif SkinName == "Blackout" then
AnimationModule.ApplyToModel(workspace.Ignore.FPSArms.HandModel, "rbxassetid://5847588525", 1, 0.3)
elseif SkinName == "Snake" then
AnimationModule.ApplyToModel(workspace.Ignore.FPSArms.HandModel, "rbxassetid://7457460026", 1, 0.3)
elseif SkinName == "Banana" then
AnimationModule.ApplyToModel(workspace.Ignore.FPSArms.HandModel, "rbxassetid://338693178", 2, 0.3)
elseif SkinName == "Death" then
AnimationModule.ApplyToModel(workspace.Ignore.FPSArms.HandModel, "rbxassetid://11896030190", 1, 0.3)
end
end
end
game:GetService("Workspace").Ignore.FPSArms.ChildAdded:Connect(function()
if game:GetService("Workspace").Ignore.FPSArms:WaitForChild("HandModel") and SkinsEnabled == true then
SetCammo(SkinChoice)
end
end)

SkinChangerTab:AddToggle('SkinsEnabled', {Text = 'enabled', Default = false}):OnChanged(function(value)
SkinsEnabled = value
end)
SkinChangerTab:AddDropdown('SkinChoice', {Values = {"Lightning", "Galaxy", "Swirl", "Wavey", "RedGalaxy", "Marble", "Lava", "Blackout", "Snake", "Banana", "Death"}, Default = 1, Multi = false, Text = 'custom skins:'}):OnChanged(function(value)
SkinChoice = value
end)

--* FOV *--
local FieldOfViewTabBox = Tabs.Local:AddLeftTabbox('field of view')
local FieldOfViewTab = FieldOfViewTabBox:AddTab('Field Of View')

local fieldofview = {
FieldOfViewEnabled = false,
FieldOfViewValue = 70,
CurrentSliderValue3 = 70,
}

local function updateFieldOfView()
local fovFunc = nil
for i, v in pairs(getreg()) do
if type(v) == "function" and getfenv(v).script.Name == "Camera" and #getupvalues(v) >= 18 then
fovFunc = v
end
end
if fovFunc then
setupvalue(fovFunc, 18, fieldofview.FieldOfViewValue)
end
end
game:GetService("RunService").RenderStepped:Connect(function()
if fieldofview.FieldOfViewEnabled then
updateFieldOfView()
end
end)

FieldOfViewTab:AddToggle('FieldOfView', { Text = 'enabled', Default = false }):AddKeyPicker('fieldofviewkey', { Default = 'Non', SyncToggleState = true, Mode = 'Toggle', Text = 'field of view', NoUI = true }):OnChanged(function(value)
fieldofview.FieldOfViewEnabled = value
if not fieldofview.FieldOfViewEnabled then
fieldofview.FieldOfViewValue = 70
else
fieldofview.FieldOfViewValue = fieldofview.CurrentSliderValue3
end
end)

FieldOfViewTab:AddSlider('FieldOfViewSlider', { Text = 'field of view:', Suffix = "x", Default = 70, Min = 30, Max = 120, Rounding = 0, Compact = false }):OnChanged(function(sliderValue)
fieldofview.CurrentSliderValue3 = sliderValue
if fieldofview.FieldOfViewEnabled then
fieldofview.FieldOfViewValue = sliderValue
updateFieldOfView()
end
end)

--* Character Edit *--

local CustomCharTabBox = Tabs.Local:AddLeftTabbox('custom character')
local CustomCharTab = CustomCharTabBox:AddTab('Custom Character')

local function CreateCustomCharacter(Mesh, Texture, Size)
local part = Instance.new("Part", workspace)
part.CFrame = workspace.Ignore.FPSArms.HumanoidRootPart.CFrame
part.CanCollide = false
part.Name = "DeleteMeForNone"
local mesh = Instance.new("SpecialMesh", part)
mesh.MeshType = Enum.MeshType.FileMesh
mesh.Scale = Size
mesh.TextureId = "http://www.roblox.com/asset/?id=" .. Texture
mesh.MeshId = "http://www.roblox.com/asset/?id=" .. Mesh
local weld = Instance.new("Weld", mesh)
weld.Part0 = workspace.Ignore.FPSArms.HumanoidRootPart
weld.Part1 = part
end

local CharacterType = "AmongUs"
local CustomCharacter = false
local function UpdateCharacter()
for _, child in pairs(workspace:GetChildren()) do
if child.Name == "DeleteMeForNone" then
child:Destroy()
end
end
if not CustomCharacter then
return
end

local characterData = {AmongUs = { Mesh = 6686375902, Texture = 6686375937, Size = Vector3.new(0.16, 0.16, 0.16) },BuilderMan = { Mesh = 2711196756, Texture = 2711196829, Size = Vector3.new(1.2, 1.2, 1.2) },Minion = { Mesh = 12009037504, Texture = 12009037612, Size = Vector3.new(5, 4, 5) },LegoCloneTrooper = { Mesh = 9903790031, Texture = 9903790118, Size = Vector3.new(0.16, 0.16, 0.16) },AnimeGirl = { Mesh = 752599066, Texture = 752599541, Size = Vector3.new(0.7, 0.7, 0.7) }}
local character = characterData[CharacterType]
if character then
CreateCustomCharacter(character.Mesh, character.Texture, character.Size)
end
end
local function ToggleCustomCharacter(value)
CustomCharacter = value
UpdateCharacter()
end
local function ChangeCharacterType(value)
CharacterType = value
UpdateCharacter()
end

CustomCharTab:AddToggle('CustomCharacter', { Text = 'enabled', Default = false }):OnChanged(ToggleCustomCharacter)
CustomCharTab:AddDropdown('Character', { Values = { 'AmongUs', 'BuilderMan', 'Minion', 'LegoCloneTrooper', 'AnimeGirl' }, Default = 1, Multi = false, Text = 'type:' }):OnChanged(ChangeCharacterType)

--* Viewmodel *--
local CustomViewmodelTabBox = Tabs.Local:AddLeftTabbox('custom viewmodel')
local CustomViewmodelTab = CustomViewmodelTabBox:AddTab('Viewmodel Editor')

local ViewmodelEnabled = false
local ViewmodelPos = Vector3.new(0, 0, 0)
local CurrentCamera = workspace.CurrentCamera
local newindex
newindex = hookmetamethod(game, '__newindex', function(obj, idx, val)
if obj == CurrentCamera and idx == 'CFrame' and ViewmodelEnabled then
val = val + (val.LookVector * ViewmodelPos.Z) + (val.RightVector * ViewmodelPos.X) + (val.UpVector * ViewmodelPos.Y)
end
return newindex(obj, idx, val)
end)

CustomViewmodelTab:AddToggle('ViewmodelEnabled', {Text = 'enabled', Default = ViewmodelEnabled}):OnChanged(function(Toggle)
ViewmodelEnabled = Toggle
end)

CustomViewmodelTab:AddSlider('ViewmodelX', {Text = 'x-offset:', Default = 0, Min = -5, Max = 5, Rounding = 2, Compact = false}):OnChanged(function(Slider)
ViewmodelPos = Vector3.new(Slider, ViewmodelPos.Y, ViewmodelPos.Z)
end)

CustomViewmodelTab:AddSlider('ViewmodelY', {Text = 'y-offset:', Default = 0, Min = -5, Max = 5, Rounding = 2, Compact = false}):OnChanged(function(Slider)
ViewmodelPos = Vector3.new(ViewmodelPos.X, Slider, ViewmodelPos.Z)
end)

CustomViewmodelTab:AddSlider('ViewmodelZ', {Text = 'z-offset:', Default = 0, Min = -5, Max = 5, Rounding = 2, Compact = false}):OnChanged(function(Slider)
ViewmodelPos = Vector3.new(ViewmodelPos.X, ViewmodelPos.Y, Slider)
end)

--* Hitsounds *--

local CustomHitsoundsTabBox = Tabs.Local:AddRightTabbox('custom hitsounds')
local PlayerHitsoundsTab = CustomHitsoundsTabBox:AddTab('custom hitsounds')

SoundService.PlayerHitHeadshot.Volume = 5
SoundService.PlayerHitHeadshot.Pitch = 1
SoundService.PlayerHitHeadshot.EqualizerSoundEffect.HighGain = -1.5
local sounds = {["Defualt Headshot"] = "rbxassetid://9119561046",["Defualt Body"] = "rbxassetid://9114487369",Neverlose = "rbxassetid://8726881116",Gamesense = "rbxassetid://4817809188",One = "rbxassetid://7380502345",Bell = "rbxassetid://6534947240",Rust = "rbxassetid://1255040462",TF2 = "rbxassetid://2868331684",Slime = "rbxassetid://6916371803",["Among Us"] = "rbxassetid://5700183626",Minecraft = "rbxassetid://4018616850",["CS:GO"] = "rbxassetid://6937353691",Saber = "rbxassetid://8415678813",Baimware = "rbxassetid://3124331820",Osu = "rbxassetid://7149255551",["TF2 Critical"] = "rbxassetid://296102734",Bat = "rbxassetid://3333907347",["Call of Duty"] = "rbxassetid://5952120301",Bubble = "rbxassetid://6534947588",Pick = "rbxassetid://1347140027",Pop = "rbxassetid://198598793",Bruh = "rbxassetid://4275842574",Bamboo = "rbxassetid://3769434519",Crowbar = "rbxassetid://546410481",Weeb = "rbxassetid://6442965016",Beep = "rbxassetid://8177256015",Bambi = "rbxassetid://8437203821",Stone = "rbxassetid://3581383408",["Old Fatality"] = "rbxassetid://6607142036",Click = "rbxassetid://8053704437",Ding = "rbxassetid://7149516994",Snow = "rbxassetid://6455527632",Laser = "rbxassetid://7837461331",Mario = "rbxassetid://2815207981",Steve = "rbxassetid://4965083997"}

PlayerHitsoundsTab:AddToggle('Enabled_Toggle1', {Text = 'enabled', Default = false})

PlayerHitsoundsTab:AddDropdown('HeadshotHit', {Values = { 'Defualt Headshot','Neverlose','Gamesense','One','Bell','Rust','TF2','Slime','Among Us','Minecraft','CS:GO','Saber','Baimware','Osu','TF2 Critical','Bat','Call of Duty','Bubble','Pick','Pop','Bruh','Bamboo','Crowbar','Weeb','Beep','Bambi','Stone','Old Fatality','Click','Ding','Snow','Laser','Mario','Steve','Snowdrake' },Default = 1, Multi = false, Text = 'Head Hitsound:'})
Options.HeadshotHit:OnChanged(function()
local soundId = sounds[Options.HeadshotHit.Value]
game:GetService("SoundService").PlayerHitHeadshot.SoundId = soundId
game:GetService("SoundService").PlayerHitHeadshot.Playing = true
end)

PlayerHitsoundsTab:AddSlider('Volume_Slider', {Text = 'volume', Default = 5, Min = 0, Max = 10, Rounding = 0, Compact = true,}):OnChanged(function(vol)
SoundService.PlayerHitHeadshot.Volume = vol
end)

PlayerHitsoundsTab:AddSlider('Pitch_Slider', {Text = 'pitch', Default = 1, Min = 0, Max = 2, Rounding = 2, Compact = true,}):OnChanged(function(pich)
SoundService.PlayerHitHeadshot.Pitch = pich
end)

PlayerHitsoundsTab:AddInput('HeadShotHitAssetID', {Default = "rbxassetid://9119561046",Numeric = false,Finished = true,Text = 'custom sound:',Placeholder = "rbxassetid://9119561046",}):OnChanged(function(CustomSoundID)
SoundService.PlayerHitHeadshot.SoundId = CustomSoundID
end)
--
PlayerHitsoundsTab:AddToggle('Enabled_Toggle2', {Text = 'enabled', Default = false})

PlayerHitsoundsTab:AddDropdown('Hit', {Values = { 'Defualt Body','Neverlose','Gamesense','One','Bell','Rust','TF2','Slime','Among Us','Minecraft','CS:GO','Saber','Baimware','Osu','TF2 Critical','Bat','Call of Duty','Bubble','Pick','Pop','Bruh','Bamboo','Crowbar','Weeb','Beep','Bambi','Stone','Old Fatality','Click','Ding','Snow','Laser','Mario','Steve','Snowdrake' },Default = 1, Multi = false, Text = 'Body Hitsound:'})
Options.Hit:OnChanged(function()
local soundId = sounds[Options.Hit.Value]
game:GetService("SoundService").PlayerHit2.SoundId = soundId
game:GetService("SoundService").PlayerHit2.Playing = true
end)

PlayerHitsoundsTab:AddSlider('Volume_Slider', {Text = 'volume', Default = 5, Min = 0, Max = 10, Rounding = 0, Compact = true,}):OnChanged(function(vole)
SoundService.PlayerHit2.Volume = vole
end)

PlayerHitsoundsTab:AddSlider('Pitch_Slider', {Text = 'pitch', Default = 1, Min = 0, Max = 2, Rounding = 2, Compact = true,}):OnChanged(function(piche)
SoundService.PlayerHit2.Pitch = piche
end)

PlayerHitsoundsTab:AddInput('PlayerHitAssetID', {Default = "rbxassetid://9114487369",Numeric = false,Finished = true,Text = 'custom sound:',Placeholder = "rbxassetid://9114487369",}):OnChanged(function(CustomSoundID)
SoundService.PlayerHit2.SoundId = CustomSoundID
end)

--* Hit *--

local HitTabBox = Tabs.Visual:AddLeftTabbox('hit')
local HitTab = HitTabBox:AddTab('Hit')

local hit = {
EnabledHitmarker = false,
HitMarkerColor = Color3.fromRGB(255, 255, 255),
HitMarkerLifetime = 2,
EnabledBulletTracer = false,
BulletTracerColor = Color3.fromRGB(255, 255, 255),
BulletTracerLifetime = 1.5,
}

local TracerType = {["Lightning Bolt"] = "rbxassetid://12781806168",["Lightning Bolt2"] = "rbxassetid://7151778302",["Laser"] = "rbxassetid://5864341017",["Red Laser"] = "rbxassetid://6333823534",["DNA"] = "rbxassetid://6511613786"}
local TracerSelected = "Lightning Bolt"
--
local Bypass; Bypass = hookfunction(game:GetService("Players").LocalPlayer:FindFirstChild("RemoteEvent").FireServer,function(self, ...)
local args = {...}
if hit.EnabledHitmarker == true then
if args[1] == 10 and args[2] == "Hit" and args[5] then
task.spawn(function()
local HitPos = Vector3.new(0,0,0)
if args[8] then HitPos = args[8] else HitPos = args[3] end
if type(HitPos) == "vector" then
local Vector, onScreen = Camera:WorldToViewportPoint(HitPos)
local Finished = false
local Line1 = Functions:Draw("Line",{Visible=onScreen,Thickness=1.5,Color=hit.HitMarkerColor,Transparency=1,From=Vector2.new(Vector.X-12,Vector.Y -12),To=Vector2.new(Vector.X-7,Vector.Y-7),})
local Line2 = Functions:Draw("Line",{Visible=onScreen,Thickness=1.5,Color=hit.HitMarkerColor,Transparency=1,From=Vector2.new(Vector.X+12,Vector.Y-12),To=Vector2.new(Vector.X+7,Vector.Y-7),})
local Line3 = Functions:Draw("Line",{Visible=onScreen,Thickness=1.5,Color=hit.HitMarkerColor,Transparency=1,From=Vector2.new(Vector.X-12,Vector.Y+12),To=Vector2.new(Vector.X-7,Vector.Y+7),})
local Line4 = Functions:Draw("Line",{Visible=onScreen,Thickness=1.5,Color=hit.HitMarkerColor,Transparency=1,From=Vector2.new(Vector.X+12,Vector.Y+12),To=Vector2.new(Vector.X+7,Vector.Y+7),})
local c; c = game:GetService("RunService").RenderStepped:Connect(function()
if hit.EnabledHitmarker then
    if not Finished then
        local Vector, onScreen = workspace.CurrentCamera:WorldToViewportPoint(HitPos)
        Line1.Visible = onScreen;Line2.Visible = onScreen;Line3.Visible = onScreen;Line4.Visible = onScreen
        Line1.From = Vector2.new(Vector.X - 12, Vector.Y - 12);Line1.To = Vector2.new(Vector.X - 7, Vector.Y - 7)
        Line2.From = Vector2.new(Vector.X + 12, Vector.Y - 12);Line2.To = Vector2.new(Vector.X + 7, Vector.Y - 7)
        Line3.From = Vector2.new(Vector.X - 12, Vector.Y + 12);Line3.To = Vector2.new(Vector.X - 7, Vector.Y + 7)
        Line4.From = Vector2.new(Vector.X + 12, Vector.Y + 12);Line4.To = Vector2.new(Vector.X + 7, Vector.Y + 7)
    else
        c:Disconnect()
    end
end
end)
local lines = {Line1, Line2, Line3, Line4}
local duration = hit.HitMarkerLifetime
local startTime = os.clock()
while os.clock() - startTime < duration do
    local progress = (os.clock() - startTime) / duration
    for _, line in ipairs(lines) do
        line.Transparency = 1 - progress
    end
    wait()
end
Finished = true;Line1:Remove();Line2:Remove();Line3:Remove();Line4:Remove()
end
end)
end
end
if hit.EnabledBulletTracer == true then
if args[1] == 10 and args[2] == "Hit" and args[5] then
task.spawn(function()
local HitPos = Vector3.new(0,0,0)
if args[8] then HitPos = args[8] else HitPos = args[3] end
if type(HitPos) == "vector" then
local Vector, onScreen = Camera:WorldToViewportPoint(HitPos)
local Finished = false
local Part = Instance.new("Part");Part.CanCollide = false;Part.Anchored = true;Part.Parent = workspace
local Attachment = Instance.new("Attachment")
Attachment.Position = CharcaterMiddle.Position;Attachment.Parent = Part;Attachment.Visible = false
local Attachment2 = Instance.new("Attachment");Attachment2.Position = HitPos;Attachment2.Parent = Part;Attachment2.Visible = false
local BulletLine = Instance.new("Beam")
BulletLine.Enabled = onScreen
BulletLine.Brightness = 10
BulletLine.LightInfluence = 0.75
BulletLine.LightEmission = 0.1
BulletLine.Attachment0 = Attachment
BulletLine.Attachment1 = Attachment2
BulletLine.TextureLength = 4
if TracerSelected == "Lightning Bolt" then
    BulletLine.Texture = "rbxassetid://12781806168"
elseif TracerSelected == "Lightning Bolt2" then
    BulletLine.Texture = "rbxassetid://7151778302"
elseif TracerSelected == "Laser" then
    BulletLine.Texture = "rbxassetid://5864341017"
elseif TracerSelected == "Red Laser" then
    BulletLine.Texture = "rbxassetid://6333823534"
elseif TracerSelected == "DNA" then
    BulletLine.Texture = "rbxassetid://6511613786"
else
    BulletLine.Texture = "rbxassetid://12781806168"
end
BulletLine.TextureSpeed = 2
BulletLine.Color = ColorSequence.new{ColorSequenceKeypoint.new(0, hit.BulletTracerColor),ColorSequenceKeypoint.new(0.5, hit.BulletTracerColor),ColorSequenceKeypoint.new(1, hit.BulletTracerColor)}
BulletLine.Transparency = NumberSequence.new(0)
BulletLine.Parent = Part
BulletLine.CurveSize0 = 0
BulletLine.CurveSize1 = 0
BulletLine.FaceCamera = false
BulletLine.Segments = 10
BulletLine.Width0 = 1
BulletLine.Width1 = 1
BulletLine.ZOffset = 0
local c; c = game:GetService("RunService").RenderStepped:Connect(function()
if hit.EnabledBulletTracer then
    if not Finished then
        local Vector, onScreen = workspace.CurrentCamera:WorldToViewportPoint(HitPos)
        BulletLine.Enabled = onScreen
    else
        c:Disconnect()
    end
end
end)
if not Finished then
    wait(hit.BulletTracerLifetime)
    Finished = true
    Part:Destroy()
end
end
end)
end
end
return Bypass(self, unpack(args))
end)

HitTab:AddToggle('Bob1231a', {Text = 'bullet tracers', Default = false}):AddColorPicker("Trail_Colors2", {Default = Color3.fromRGB(255,255,255)}):OnChanged(function(BulletTracers)
hit.EnabledBulletTracer = BulletTracers
end)
Options.Trail_Colors2:OnChanged(function(Trail_Colors2)
hit.BulletTracerColor = Trail_Colors2
end)
HitTab:AddSlider('BulletLifetimeSlider', {Text = 'lifetime:',Suffix = "s",Default = hit.BulletTracerLifetime, Min = 1.5, Max = 5, Rounding = 1, Compact = false}):OnChanged(function(Value)
hit.BulletTracerLifetime = Value
end)
HitTab:AddDropdown('', { Values = {'Lightning Bolt','Lightning Bolt2','Laser', 'Red Laser', 'DNA'}, Default = 1, Multi = false, Text = 'bullet tracer type:' }):OnChanged(function(Value)
TracerSelected = Value
end)
--
HitTab:AddToggle('HitMarkers', {Text = 'hit markers', Default = false}):AddColorPicker("HitmarkerLifetime_Color", {Default = Color3.fromRGB(255,255,255)}):OnChanged(function(HitMarkers)
hit.EnabledHitmarker = HitMarkers
end)
Options.HitmarkerLifetime_Color:OnChanged(function(HitMarkerColors)
hit.HitMarkerColor = HitMarkerColors
end)
HitTab:AddSlider('HitMarkerLifetime', {Text = 'lifetime:',Suffix = "s",Default = hit.HitMarkerLifetime, Min = 2, Max = 5, Rounding = 1, Compact = false}):OnChanged(function(Value)
hit.HitMarkerLifetime = Value
end)


--* Lighting *--

local CustomSkyTabBox = Tabs.World:AddRightTabbox('lighting')
local CustomSkyTab = CustomSkyTabBox:AddTab('Lighting')

local LightingEnabled = nil

CustomSkyTab:AddToggle('AWASZnfh', {Text = "Enabled",Default = false,Tooltip = "Enables SkyTab",}):OnChanged(function(EnabledLighting)
LightingEnabled = EnabledLighting
end)

CustomSkyTab:AddToggle('z1AWASZnfh', {Text = "Remove Shadows",Default = false,Tooltip = "Global Shadows On/Off",}):OnChanged(function(GlobalShadowsToggle)
if LightingEnabled and GlobalShadowsToggle == true then
sethiddenproperty(game:GetService("Lighting"), "GlobalShadows", false)
elseif LightingEnabled and GlobalShadowsToggle == false then
sethiddenproperty(game:GetService("Lighting"), "GlobalShadows", true)
end
end)

CustomSkyTab:AddToggle('51z1AWASZnfh', {Text = "Remove Fog",Default = false,Tooltip = "Fog On/Off",}):OnChanged(function(RemoveFogToggle)
if LightingEnabled and RemoveFogToggle == true then
sethiddenproperty(game:GetService("Lighting"), "FogStart", math.huge)
elseif LightingEnabled and RemoveFogToggle == false then
sethiddenproperty(game:GetService("Lighting"), "FogStart", 150)
end
end)

CustomSkyTab:AddToggle('5za1z1AWASZnfh', {Text = "Remove Clouds",Default = false,Tooltip = "Clouds On/Off",}):OnChanged(function(RemoveCloudsToggle)
if LightingEnabled and RemoveCloudsToggle == true then
sethiddenproperty(game:GetService("Workspace").Terrain.Clouds, "Enabled", false)
elseif LightingEnabled and RemoveCloudsToggle == false then
sethiddenproperty(game:GetService("Workspace").Terrain.Clouds, "Enabled", true)
end
end)

CustomSkyTab:AddToggle('Grass', {Text = 'Remove Grass',Default = false,Tooltip = "Grass On/Off",}):OnChanged(function(GrassRemove)
if LightingEnabled and GrassRemove == true then
sethiddenproperty(game.Workspace.Terrain, "Decoration", false)
elseif LightingEnabled and GrassRemove == false then
sethiddenproperty(game.Workspace.Terrain, "Decoration", true)
end
end)

local GCEN = Color3.fromRGB(95, 100, 49)
local GRCEND = false

CustomSkyTab:AddToggle('CLRG', {Text = 'Grass Color', Default = true, Tooltip = "Off/On"}):AddColorPicker('ColorGrass', {Default = GCEN, Title = 'Changer Color Grass'})
Toggles.CLRG:OnChanged(function(T)
GRCEND = T
game:GetService("Workspace").Terrain:SetMaterialColor(Enum.Material.Grass, T and GCEN or Color3.fromRGB(95, 100, 49))
end)
Options.ColorGrass:OnChanged(function(Grass1)
if GRCEND then
GCEN = Grass1
game:GetService("Workspace").Terrain:SetMaterialColor(Enum.Material.Grass, Grass1)
end
end)

local CloudsColor = Color3.fromRGB(255, 255, 255)
local EnableCustomColor = false

CustomSkyTab:AddToggle('CLRG1', {Text = 'Cloud Color', Default = EnableCustomColor, Tooltip = "Off/On"}):AddColorPicker('ColorGrass1', {Default = CloudsColor, Title = 'Change Clouds Color'})
Toggles.CLRG1:OnChanged(function(T)
EnableCustomColor = T
game:GetService("Workspace").Terrain.Clouds.Color = T and CloudsColor or Color3.fromRGB(255, 255, 255)
end)
Options.ColorGrass1:OnChanged(function(NewColor)
if LightingEnabled and EnableCustomColor then
CloudsColor = NewColor
game:GetService("Workspace").Terrain.Clouds.Color = NewColor
end
end)

local Lighting = game:GetService("Lighting")
local ColorCorrection = Lighting:FindFirstChild("ColorCorrection")
if not ColorCorrection then
ColorCorrection = Instance.new("ColorCorrectionEffect")
ColorCorrection.Name = "ColorCorrection"
ColorCorrection.Parent = Lighting
end

CustomSkyTab:AddToggle('CLRG1', {Text = 'Ambient', Default = EnableCustomColor, Tooltip = "Off/On"}):AddColorPicker('ColorAmbient1', {Default = Color3.fromRGB(255, 255, 255), Title = 'Change Ambient Color'})
Options.ColorAmbient1:OnChanged(function(NewColor2)
sethiddenproperty(ColorCorrection, "TintColor", NewColor2)
end)

CustomSkyTab:AddSlider('Exposure_sUS', {Text = 'Exposure', Suffix = "%", Default = 0, Min = -5, Max = 5, Rounding = 1, Compact = true}):OnChanged(function(ExposureValue)
if LightingEnabled and sethiddenproperty(game:GetService("Lighting"), "ExposureCompensation", ExposureValue) then
end
end)

CustomSkyTab:AddSlider('Saturation_sUS', {Text = 'Saturation',Suffix = "%",Default = 0,Min = -5,Max = 5,Rounding = 1,Compact = true}):OnChanged(function(SaturationValue)
if sethiddenproperty(ColorCorrection, "Saturation", SaturationValue) then
end
end)

CustomSkyTab:AddDropdown('World_Technology', {Values = { 'Technology', 'ShadowMap', 'Voxel', 'Compatibility' },Default = 1,Multi = false,Text = 'technology:',Tooltip = 'Game Technology',}):OnChanged(function(GPHZ)
if LightingEnabled and GPHZ == "Technology" then
sethiddenproperty(game.Lighting, "Technology", Enum.Technology.Future)
elseif LightingEnabled and GPHZ == "ShadowMap" then
sethiddenproperty(game.Lighting, "Technology", Enum.Technology.ShadowMap)
elseif LightingEnabled and GPHZ == "Voxel" then
sethiddenproperty(game.Lighting, "Technology", Enum.Technology.Voxel)
elseif LightingEnabled and GPHZ == "Compatibility" then
sethiddenproperty(game.Lighting, "Technology", Enum.Technology.Compatibility)
end
end)

local Sky = Instance.new("Sky",game:GetService("Lighting"))
CustomSkyTab:AddDropdown('World_Skybox', {Values = { 'Default', 'Neptune', 'Among Us', 'Nebula', 'Vaporwave', 'Clouds', 'Twilight', 'DaBaby', 'Minecraft', 'Chill', 'Redshift', 'Blue Stars', 'Blue Aurora' },Default = 1,Multi = false,Text = 'custom skybox:',Tooltip = 'Sky Changer',}):OnChanged(function(World_Skybox)
if LightingEnabled and lighting:FindFirstChild("Sky") then
lighting.Sky.SkyboxBk = skybox_assets[World_Skybox].SkyboxBk
lighting.Sky.SkyboxDn = skybox_assets[World_Skybox].SkyboxDn
lighting.Sky.SkyboxFt = skybox_assets[World_Skybox].SkyboxFt
lighting.Sky.SkyboxLf = skybox_assets[World_Skybox].SkyboxLf
lighting.Sky.SkyboxRt = skybox_assets[World_Skybox].SkyboxRt
lighting.Sky.SkyboxUp = skybox_assets[World_Skybox].SkyboxUp
end
end)

local Misc = {
Settings = {
JumpShoot = false,
NoADS = false,
}
}

ExploitsTab:AddToggle('JumpShoot',{Text='Jump Shoot',Default=false}):OnChanged(function(Value)
Misc.Settings.JumpShoot = Value
end)
local oldIsGrounded;oldIsGrounded = hookfunction(getrenv()._G.modules.Character.IsGrounded,function(...)
if Misc.Settings.JumpShoot == true then
return true
else
return oldIsGrounded(...)
end
end)

ExploitsTab:AddToggle('NoADS',{Text='No Ads',Default=false}):OnChanged(function(Value)
Misc.Settings.NoADS = Value
end)
local oldNoADS;oldNoADS = hookfunction(getrenv()._G.modules.Camera.SetVMAimingOffset,function(...)
if Misc.Settings.NoADS == true then
return true
else
return oldNoADS(...)
end
end)

ExploitsTab:AddToggle('NOSLOWDOWN',{Text='No Slowdown',Default=false}):OnChanged(function(Value)
local NoSlowDown = false
local old = getrenv()._G.modules.Character.SetSprintBlocked
NoSlowDown = Value
getrenv()._G.modules.Character.SetSprintBlocked = function(...)
local args = {...}
if NoSlowDown then
args[1] = false
return old(unpack(args))
end
return old(...)
end
end)

local NoSway = false
ExploitsTab:AddToggle('NoSway',{Text='No Sway',Default=false}):OnChanged(function(Value)
NoSway = Value
end)
local NoSwayHook;NoSwayHook = hookfunction(getrenv()._G.modules.Camera.SetSwaySpeed,function(...)
local args = {...}
if NoSway == true then
args[1] = 0
return NoSwayHook(unpack(args))
end
return NoSwayHook(...)
end)

local ArmVisTabBox = Tabs.Misc:AddLeftTabbox('arm visuals')
local ArmVisTab = ArmVisTabBox:AddTab('Local Chams')


--* Local Chams *--

local Misc2 = {Settings = {LocalChams = false,LocalChamsColor = Color3.fromRGB(80, 77, 56),LocalChamsMaterial = "SmoothPlastic"}}
local DeafultArm = {}
for i,v in pairs(game:GetService("Workspace").Ignore.FPSArms:GetChildren()) do
if v:IsA("MeshPart") then
DeafultArm[v] = {Color=v.Color,Material=v.Material}
end
end
function Functions:ArmChams()
if Misc2.Settings.LocalChams == true then
for i,v in pairs(game:GetService("Workspace").Ignore.FPSArms:GetChildren()) do
if v.ClassName == "MeshPart" then
  v.Color=Misc2.Settings.LocalChamsColor
  v.Material=Enum.Material[Misc2.Settings.LocalChamsMaterial]
end
end
else
for i,v in pairs(DeafultArm) do
i.Color=v.Color;i.Material=v.Material
end
end
end
for i,v in pairs(game:GetService("Workspace").Ignore.FPSArms:GetChildren()) do
v.Changed:Connect(function(Change)
if Change ~= "CFrame" then
if Misc2.Settings.LocalChams == true then
v.Color=Misc2.Settings.LocalChamsColor
v.Material=Enum.Material[Misc2.Settings.LocalChamsMaterial]
else
for i,v in pairs(DeafultArm) do
  i.Color=v.Color;i.Material=v.Material
end
end
end
end)
end
game:GetService("Workspace").Ignore.FPSArms.Changed:Connect(function()
Functions:ArmChams()
end)

ArmVisTab:AddToggle('ArmChams',{Text='enabled',Default=false}):AddColorPicker('ArmChamsColor',{Default=Color3.fromRGB(208,123,255),Title='Color'})
Toggles.ArmChams:OnChanged(function(Value)
Misc2.Settings.LocalChams = Value
Functions:ArmChams()
end)
Options.ArmChamsColor:OnChanged(function(Value)
Misc2.Settings.LocalChamsColor = Value
end)

ArmVisTab:AddDropdown('ArmChamsMaterial',{Values={"ForceField","Neon","Ice","Glass"},Default=1,Multi=false,Text='arm material:'})
Options.ArmChamsMaterial:OnChanged(function(Value)
Misc2.Settings.LocalChamsMaterial = Value
end)

ArmVisTab:AddInput('', {Default = 'rbxassetid://4990660900', Numeric = false, Finished = true, Text = 'Texture ID:', Placeholder = 'rbxassetid://...'}):OnChanged(function(TextureID)
game:GetService("Workspace").Ignore.FPSArms.LeftUpperArm.TextureID = TextureID
game:GetService("Workspace").Ignore.FPSArms.LeftLowerArm.TextureID = TextureID
game:GetService("Workspace").Ignore.FPSArms.LeftHand.TextureID = TextureID
game:GetService("Workspace").Ignore.FPSArms.RightUpperArm.TextureID = TextureID
game:GetService("Workspace").Ignore.FPSArms.RightLowerArm.TextureID = TextureID
game:GetService("Workspace").Ignore.FPSArms.RightHand.TextureID = TextureID
end)

--

local NoRecoil; NoRecoil = hookfunction(getrenv()._G.modules.Camera.Recoil, function(...)
args = {...}
if GunModsEnabled then
args[1]["cameraY"] = Recoil_Value / 50;args[1]["cameraX"] = Recoil_Value / 50
return NoRecoil(unpack(args))
end
end)

local oldNoSpread;oldNoSpread = hookfunction(getupvalues(getrenv()._G.modules.FPS.ToolControllers.RangedWeapon.PlayerFire)[1],function(...)
local arg = {...}
if GunModsEnabled and gunMods.noSpreadTog == true then
arg[2]['Accuracy'] = math.huge
return oldNoSpread(unpack(arg))
end
return oldNoSpread(...)
end)

--

Library:SetWatermarkVisibility(true)
local FrameTimer = tick()
local FrameCounter = 0;
local FPS = 60;
local WatermarkConnection = game:GetService('RunService').RenderStepped:Connect(function()
FrameCounter += 1;

if (tick() - FrameTimer) >= 1 then
    FPS = FrameCounter;
    FrameTimer = tick();
    FrameCounter = 0;
end;

Library:SetWatermark(('Minty.cc | Build: Custom | Game: Trident Survival V2 | %s fps | %s ms'):format(
    math.floor(FPS),
    math.floor(game:GetService('Stats').Network.ServerStatsItem['Data Ping']:GetValue())
));
end);

Library.KeybindFrame.Visible = true;

Library:OnUnload(function()
WatermarkConnection:Disconnect()
for i,v in pairs(Toggles) do
    v:SetValue(false)
end
PlayerConnection:Disconnect()
Library.Unloaded = true
end)

local MenuGroup = Tabs['UI Settings']:AddLeftGroupbox('Menu')
MenuGroup:AddButton('Unload', function() Library:Unload() end)
MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'End', NoUI = true, Text = 'Menu keybind' })
Library.ToggleKeybind = Options.MenuKeybind
ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({ 'MenuKeybind' })
ThemeManager:SetFolder('Float')
SaveManager:SetFolder('Float/TridentSurvivalNoActor')
SaveManager:BuildConfigSection(Tabs['UI Settings'])
ThemeManager:ApplyToTab(Tabs['UI Settings'])
SaveManager:LoadAutoloadConfig()

Library:Notify("Welcome "..game.Players.LocalPlayer.Name.." Thanks for using Minty.cc",8)
Library:Notify("Status: Undetected 🟩",8)
local notifyPlayerChange = function(player, message, color)
local prefix = player:IsFriendsWith(game.Players.LocalPlayer.UserId) and "notification - friend" or "notification - player"
Library:Notify(("%s | user: %s | %s"):format(prefix, player.DisplayName, message), prefix == "notification - friend" and 6 or 3, color)
end
game.Players.PlayerAdded:Connect(function(player)
notifyPlayerChange(player, "joined", Color3.fromRGB(0, 255, 0))
end)
game.Players.PlayerRemoving:Connect(function(player)
notifyPlayerChange(player, "left", Color3.fromRGB(255, 0, 0))
end)
